---
layout:     post
title:      "谈谈最近项目中的组件设计 「译」"
subtitle:   "HTML, CSS, JavaScript, component, front-end"
date:       2018-04-30
author:     "Chou"
header-img: "img/post-bg-js-version.jpg"
tags:
    - 前端开发
    - 日语译文
---

随着以各种组件库为基础的React,Vue等前端框架的普及，如今的前端可以说是变成了面向组件开发的前端，是不是在组件的设计过程中遇到了很多的困难呢。

组件划分的颗粒度、什么样的状态下划分会更好，如果在整个开发团队没有达到一个共识的情况下很容易造成混乱。本篇文章的目的就是简述组件设计时怎么达到规范化。如果有人有同样的烦恼，看到这篇文章能得到解决，我会非常开心。

##### 目标读者

* “组件设计是什么？好吃吗？”
* ”第一次设计组件，这样做真的好吗？“，对自己没有信心的人。

#### 引言：组件是什么

首先，“组件（component）”这个词。在这里我们将它定义为“GUI的模块化部分”。

GUI基本上存在于PC、手机等设备的画面上，在其中包括了很多为了达到完成应用而设计的功能。一般的应用都由多个画面构成，有很多部分会被重复地使用。例如，页眉和页脚将出现在几乎所有的页面上，并且具有相同样式的按钮，文本字段等也可能会在多个画面上重复使用。利用组件化的思想将这些部分分别开来，提高了再利用习惯的同时，也方便了在设计与技术方面的合作。

这样的组件由下面的4个要素构成。

1. 文本结构（HTML）
2. 样式（CSS）
3. 状态
4. 功能

![ã¹ã¯ãªã¼ã³ã·ã§ãã 2018-04-01 13.14.51.png](https://camo.qiitausercontent.com/98df0a6cdc1a02d23e7d26c017c18328eebfe72b/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3135303536392f35653264393734622d616161662d333564652d386635372d3839336461303336333463612e706e67)

首先是文本结构，这是HTML负责的部分，CSS负责样式部分。在开始设计组件时，这些方面很容易想象，如果您根据（Atomic Design）原子设计等概念简单分解UI部件，则此处不应有太多困难。

然而这不是最近的前端所提倡的做法，因为组件本身负责触发变化的状态和交互，由于组件还必须与外部交换数据和回调，因此会对实现效率产生限制。 为了提高工程师的生产力，常常产生审美与实现难易之间的冲突。

我认为封装多个这样的角色是设计组件很困难的一个因素。接下来我将以我自己的理解来介绍。

#### 文本结构和样式

文本结构和样式是非常相似的概念。（**翻译存疑**）

####原子设计原则(Atomic Design)

首先将UI分层是一个共识性的概念。
最近感觉，原子设计已经成了默认的设计标准。所以我的建议是暂时应用这种标准是最好的。

原子设计的思想将组件的设计划分成了以下的5个部分：

常见的原子设计图 ▼ 

![1_j1P0pjQtl36QJavv8lHdyw.png](https://camo.qiitausercontent.com/eeba4ade8249948c264ad49bced48bd8e1cb0e5d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3135303536392f37336666633433612d613138312d666164392d613136652d6639623839343437356638352e706e67)

* Atom（原子） - UI的最小単位。在功能上不能再进一步划分的部分，比如按钮和文本等。
* Molecule（分子） - 由Atom组成的元素，如检索框。
* Organisms（有机体） - 由分子和原子组合而成的元素。与分子的单一功能不同，其具有多个功能。
* Template （模板）- 由Organisms组成的元素，也就是所谓的Wire frame。
* Pages （页面）- 将数据注入模板形成的页面。

关于以上有很详细的介绍，在这里附上链接：

* [珍しいワークフロー：Atomic Designの原則とSketchでデザインからプログラミングまで](https://postd.cc/the-unicorn-workflow-design-to-code-with-atomic-design-principles-and-sketch/)
* [Atomic Designの考え方と利点・欠点](http://blog.kubosho.com/entry/using-atomic-design)
















> 著作权声明
>

本文译自 [最近のフロントエンドのコンポーネント設計に立ち向かう](https://qiita.com/seya/items/8814e905693f00cdade2)   
译者 [张健](http://chioken.com/about/)，首次发布于 [Chioken Blog](http://chioken.com/)，转载请保留以上链接