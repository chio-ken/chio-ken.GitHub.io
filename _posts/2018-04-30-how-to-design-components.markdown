---
layout:     post
title:      "谈谈最近项目中的组件设计 「译」"
subtitle:   "HTML, CSS, JavaScript, component, front-end"
date:       2018-04-30
author:     "Chou"
header-img: "img/post-bg-js-version.jpg"
tags:
    - 前端开发
    - 日语译文
---

随着以各种组件库为基础的React,Vue等前端框架的普及，如今的前端可以说是变成了面向组件开发的前端，是不是在组件的设计过程中遇到了很多的困难呢。

组件划分的颗粒度、什么样的状态下划分会更好，如果在整个开发团队没有达到一个共识的情况下很容易造成混乱。本篇文章的目的就是简述组件设计时怎么达到规范化。如果有人有同样的烦恼，看到这篇文章能得到解决，我会非常开心。

##### 目标读者

* “组件设计是什么？好吃吗？”
* ”第一次设计组件，这样做真的好吗？“，对自己没有信心的人。

#### 引言：组件是什么

首先，“组件（component）”这个词。在这里我们将它定义为“GUI的模块化部分”。

GUI基本上存在于PC、手机等设备的画面上，在其中包括了很多为了达到完成应用而设计的功能。一般的应用都由多个画面构成，有很多部分会被重复地使用。例如，页眉和页脚将出现在几乎所有的页面上，并且具有相同样式的按钮，文本字段等也可能会在多个画面上重复使用。利用组件化的思想将这些部分分别开来，提高了再利用习惯的同时，也方便了在设计与技术方面的合作。

这样的组件由下面的4个要素构成。

1. 文本结构（HTML）
2. 样式（CSS）
3. 状态
4. 功能

![java-javascript](/img/in-post/how-to-design-components/four-element-of-component.png)

首先是文本结构，这是HTML负责的部分，CSS负责样式部分。在开始设计组件时，这些方面很容易想象，如果您根据（Atomic Design）原子设计等概念简单分解UI部件，则此处不应有太多困难。

然而这不是最近的前端所提倡的做法，因为组件本身负责触发变化的状态和交互，由于组件还必须与外部交换数据和回调，因此会对实现效率产生限制。 为了提高工程师的生产力，常常产生审美与实现难易之间的冲突。

我认为封装多个这样的角色是设计组件很困难的一个因素。接下来我将以我自己的理解来介绍。

#### 文本结构和样式

文本结构和样式是非常相似的概念。（**翻译存疑**）

####原子设计原则(Atomic Design)

首先将UI分层是一个共识性的概念。
最近感觉，原子设计已经成了默认的设计标准。所以我的建议是暂时应用这种标准是最好的。

原子设计的思想将组件的设计划分成了以下的5个部分：

常见的原子设计图 ▼ 

![java-javascript](/img/in-post/how-to-design-components/Atomic-Design_Picture.png)

* Atom（原子） - UI的最小単位。在功能上不能再进一步划分的部分，比如按钮和文本等。
* Molecule（分子） - 由Atom组成的元素，如检索框。
* Organisms（有机体） - 由分子和原子组合而成的元素。与分子的单一功能不同，其具有多个功能。
* Template （模板）- 由Organisms组成的元素，也就是所谓的Wire frame。
* Pages （页面）- 将数据注入模板形成的页面。

关于以上有很详细的介绍，在这里附上链接：

* [珍しいワークフロー：Atomic Designの原則とSketchでデザインからプログラミングまで](https://postd.cc/the-unicorn-workflow-design-to-code-with-atomic-design-principles-and-sketch/)
* [Atomic Designの考え方と利点・欠点](http://blog.kubosho.com/entry/using-atomic-design)


#### 单一责任原则

原则上，一个组件应该对一件事负责。

在设计Molecule（分子）级别的组件时，这是一种重要的思维方式。当一个组件具有多个功能/角色时，这就预示着设计是糟糕的。

糟糕的原因就是复用性低。

像下面的例子中，创建了一个具有“更改用户名”和“连接外部服务”这两个功能的组件。

​          ![java-javascript](/img/in-post/how-to-design-components/example-for-single-responsiblity-rule.png)

接下来，在用到这个组件的页面中，经常会有“我想要颠倒「用户名」和「外部服务」的顺序”、“我想要在「用户名」和「外部服务」之间加个”图标更改按钮“等等的需求。

这样一来，我们就要在这个有缺陷的组件上加入复杂的条件分支，而且父组件还需要详细了解此子组件的样式，这样就会产生严重的耦合。

所以如果从一开始就将「更改用户名」和「与外部服务链接」构建成两个单独的组件，则只需对新组件进行排序和添加即可。

虽然举的这个例子是比较极端的情况，但我想还是能够将我的意思表达清楚了。

读到这的时候可能有人就会觉得“Organisms（有机体）规模以上的元素随便怎么设计都可以了，就算有多个功能也没关系”。关于这一点，我认为Organisms（有机体）规模以上的元素，不应按功能划分，而应该按布局（layout）而划分。

例如，Qiita的标题部分，有社区相关的下拉菜单、通知、跳转到我的页面的按钮等很多的功能。

![java-javascript](/img/in-post/how-to-design-components/title-of-Qiita.png)

然而，这些并不是由Header组件本身实现的功能，是包含在Header中的单独的分子或原子实现了的功能。

Header仅仅负责这些单独分子或原子的布局。

简而言之，如果您认为组件的责任不仅包含简单的功能，而且还包含布局，我认为按上述的做法会更容易。



上面所讲的对样式也是同样的原则。

首先对于样式，我个人认为应该分为2种。

1. 外观样式

2. 布局样式

   ​

「外观样式」定义了对象组件的外观。相对应的，「布局样式」是对于分子级别以上的组件，定义了这个组件中的子组件们 是以怎样的方式布局的。

我想表达的是：

* 父组件不会知道子组件的外观样式

* 子组件不会知道父组件的布局样式

  ​

例如，存在多个下面这样的 icon 组件。

![java-javascript](/img/in-post/how-to-design-components/icon-components.png)

各个icon之间是等距离分布的。

假设我们在图标组件中定义了此边距。

```javascript
.icon {
    ...
    margin-right: 15px;
}
```

那么，假设你想在另一个页面上使用这个图标。 这一次，我们假设布局要求图标右侧的边距为100px。 这时候在哪里去实现这个属性好呢？

解决方案有很多种，但我认为无论您选择哪个方案，您都必须担心此图标组件中的margin。 很容易想象，随着此类解决方案的积累，将会增加越来越多的脏CSS。

出于这个原因，子组件不应该关心父组件的布局风格（译者注：如各个子组件之间的间距），反之亦然，父组件也不应该（太多）关注子组件的外观样式。 所以样式也要根据组件的分工来闭合。





> 著作权声明
>

本文译自 [最近のフロントエンドのコンポーネント設計に立ち向かう](https://qiita.com/seya/items/8814e905693f00cdade2)   
译者 [张健](http://chioken.com/about/)，首次发布于 [Chioken Blog](http://chioken.com/)，转载请保留以上链接